version: '3'

services:
  db:
    image: mongo
    ports:
      - 27017:27017
#  deploy:
#    replicas: 2


  lerna:
    image: yurikrupnik/client-apps_lerna
    build:
      context: .
    container_name: lerna
    deploy:
      replicas: 0
#
  gateway1:
    image: yurikrupnik/client-apps_gateway1
    build:
      context: packages/gateways/gateway1
    container_name: gateway1
    environment:
      - PORT=8000
      - DEST_PORT=7000
      - USERS_HOST=http://service1:7000
      - PROJECTS_HOST=http://projects:7001
    command: npm run start
    depends_on:
      - service1
      - projects
      - lerna
#    ports:
#      - 8000:8000
    deploy:
      replicas: 1
##
#  storybook:
#    image: yurikrupnik/client-apps_storybook
#    build:
#      context: .
#      dockerfile: Dockerfile.storybook
#    container_name: storybook
#    ports:
#      - 6001:6001
#    depends_on:
#      - db
#      - lerna
#    deploy:
#      replicas: 1

  docs:
    image: yurikrupnik/client-apps_docs
    build:
      context: .
      dockerfile: Dockerfile.docs
    container_name: docs
    ports:
      - 6002:6002
    depends_on:
      - lerna
    deploy:
      replicas: 1

  projects:
    image: yurikrupnik/client-apps_projects
    build:
      context: packages/services/projects
#      args:
#        - DATABASE_URL=mongodb://db/projects-db
    container_name: projects
    environment:
      - PORT=7001
      - DATABASE_URL=mongodb://db/service1-db
#      - DATABASE_URL=${projects_db}
#    ports:
#      - 7001:7001
    command: npm run start
    depends_on:
      - db
      - lerna
    deploy:
      replicas: 1

  service1:
    image: yurikrupnik/client-apps_service1
    build:
      context: packages/services/service1
#      dockerfile:
#      args:
#        - DATABASE_URL=mongodb://db/service1-db
#        - HOST=0.0.0.0
    container_name: service1
    environment:
      - PORT=7000
#      - NODE_ENV_DOCKER=true
      - DATABASE_URL=mongodb://db/service1-db
#      - DATABASE_URL=${users_db}
#    ports:
#      - 7000:7000
    command: npm run start
    depends_on:
      - db
      - lerna
    deploy:
      replicas: 1

  webserver1:
    image: yurikrupnik/client-apps_webserver1
    build:
      context: packages/webservers/webserver1
    container_name: webserver1
    environment:
      - DEST_PORT=8000
      - PORT=9000
      - DESTINATION_HOST=http://gateway1
#      - USERS_ENDPOINT=http://localhost:7000
#      - for compose local
#      - DESTINATION_HOST=http://192.168.99.107 for compose cloud
#      - DOCKER_HOST=http://192.168.99.107
#      - HOST=http://192.168.99.107
#      - HOST=0.0.0.0
#      - host=0.0.0.0
#      - HOST=gateway1
#      - NODE_ENV_DOCKER=true
    ports:
      - 9000:9000
    command: npm run start
    depends_on:
      - db
      - lerna
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  webserver2:
    image: yurikrupnik/client-apps_webserver2
    build:
      context: packages/webservers/webserver2
    container_name: webserver2
    environment:
      - DEST_PORT=8000
      - PORT=9001
      - DESTINATION_HOST=http://gateway1
#      - USERS_ENDPOINT=http://localhost:7000
    #      - for compose local
    #      - DESTINATION_HOST=http://192.168.99.107 for compose cloud
    #      - DOCKER_HOST=http://192.168.99.107
    #      - HOST=http://192.168.99.107
    #      - HOST=0.0.0.0
    #      - host=0.0.0.0
    #      - HOST=gateway1
    #      - NODE_ENV_DOCKER=true
    ports:
      - 9001:9001
    command: npm run start
    depends_on:
      - db
      - lerna
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
#  visualizer:
#    image: dockersamples/visualizer:stable
#    ports:
#      - "8080:8080"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    deploy:
#      placement:
#        constraints: [node.role == manager]

#networks:
#  mynet:
